implement main
    open core, file, stdio

domains
    part = европа; азия; африка; австралия; севернаяамерика; южнаяамерика.

class facts - map
    город : (integer Id, string Город, part ЧастьСвета, integer Население).
    страна : (integer Id, string Страна, integer Население, string Язык).
    представляет : (integer Id_страны, integer Id_города).

class predicates  %Вспомогательные предикаты
    длина : (A*) -> integer N.
    сумма_элем : (real* List) -> real Sum.
    среднее_списка : (real* List) -> real Average determ.

class predicates  %Основные предикаты
    %Правило1 "Список городов для страны"
    списокГородов : (string Страна) -> string* Города determ.
    %Правило2 "Страна для города"
    городРасположенВ : (string Город) -> string* Страны determ.
    %Правило3 "Сумма населений городов в заданной части света"
    суммаНаселения : (part ЧастьСвета) -> real Сумма determ.
    %Правило4 "Вывод стран по части света"
    частьСвета : (part ЧастьСвета) -> string* Страны determ.
    %Правило5 "На каком языке разговаривают в городе?"
    язык : (string Город) -> string* Языки determ.
    %Правило6 "Число стран, принадлежащих части света"
    числоСтран : (part ЧастьСвета) -> integer N determ.
    %Правило7 "Средняя число населения одной части света"
    среднееЧислоНаселения : (part ЧастьСвета) -> real N determ.

clauses
    длина([]) = 0.
    длина([_ | T]) = длина(T) + 1.

    сумма_элем([]) = 0.
    сумма_элем([H | T]) = сумма_элем(T) + H.

    среднее_списка(L) = сумма_элем(L) / длина(L) :-
        длина(L) > 0.

clauses
    %Правило1 "Список городов для страны"
    списокГородов(НазваниеС) = List :-
        страна(IdС, НазваниеС, _, _),
        !,
        List =
            [ НазваниеГ ||
                представляет(IdС, IdГ),
                город(IdГ, НазваниеГ, _, _)
            ].

    %Правило2 "Страна для города"
    городРасположенВ(НазваниеГ) = List :-
        город(IdГ, НазваниеГ, _, _),
        !,
        List =
            [ НазваниеС ||
                страна(IdС, НазваниеС, _, _),
                представляет(IdС, IdГ)
            ].

    %Правило3 "Сумма населений городов в заданной части света"
    суммаНаселения(ЧастьСвета) = сумма_элем([ Население || город(_, _, ЧастьСвета, Население) ]) :-
        !.

    %Правило4 "Вывод стран по части света"
    частьСвета(ЧастьСвета) = List :-
        город(IdГ, _, ЧастьСвета, _),
        !,
        List =
            [ НазваниеС ||
                представляет(IdС, IdГ),
                страна(IdС, НазваниеС, _, _)
            ].

    %Правило5 "На каком языке разговаривают в городе?"
    язык(НазваниеГ) = List :-
        город(IdГ, НазваниеГ, _, _),
        !,
        List =
            [ Язык ||
                представляет(IdС, IdГ),
                страна(IdС, _, _, Язык)
            ].

    %Правило6 "Число стран, принадлежащих части света"
    числоСтран(ЧастьСвета) = длина(частьСвета(ЧастьСвета)).

    %Правило7 "Средняя число населения городов одной части света"
    среднееЧислоНаселения(ЧастьСвета) = среднее_списка([ Население || город(_, _, ЧастьСвета, Население) ]).

class predicates
    write_string : (string* Строки).
clauses
    write_string(L) :-
        foreach Элемент = list::getMember_nd(L) do
            write(Элемент, '; ')
        end foreach,
        write('\n').

clauses
    run() :-
        consult("data.txt", map),
        fail.

    run() :-
        write("\n1. Список городов для страны: \n"),
        X = "Россия",
        write(X, ': '),
        L = списокГородов(X),
        write_string(L),
        fail.

    run() :-
        write("\n2. Страна для города: \n"),
        X = "Рим",
        write(X, ': '),
        L = городРасположенВ(X),
        write_string(L),
        fail.

    run() :-
        write("\n3. Сумма населений городов в заданной части света: \n"),
        X = азия,
        write(X, ': '),
        Sum = суммаНаселения(X),
        write(Sum, '\n'),
        fail.

    run() :-
        write("\n4. Вывод стран по части света: \n"),
        X = южнаяамерика,
        write(X, ': '),
        L = частьСвета(X),
        write_string(L),
        fail.

    run() :-
        write("\n5. На каком языке разговаривают в городе?: \n"),
        X = "Оттава",
        write(X, ': '),
        L = язык("Оттава"),
        write_string(L),
        fail.

    run() :-
        write("\n6. Число стран, принадлежащих части света: \n"),
        X = севернаяамерика,
        write(X, ': '),
        N = числоСтран(X),
        write(N, '\n'),
        fail.

    run() :-
        write("\n7. Средняя число населения городов одной части света: \n"),
        X = европа,
        write(X, ': '),
        Sred = среднееЧислоНаселения(X),
        write(Sred, '\n'),
        fail.

    run().

end implement main

goal
    console::run(main::run).
